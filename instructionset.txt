
32b adresses

binary header
    size 32 bytes
    - 2B: version number


0bxxxx reg-> 16 registers
    0x0 -> ra
    0x1 -> rb
    0x2 -> rc
    0x3 -> rd

    0x4 -> r1
    0x5 -> r2
    0x6 -> r3
    0x7 -> r4
    0x8 -> r5
    0x9 -> r6
    0xA -> r7
    0xB -> r8
    0xC -> r9

    0xD -> rz: zero register always returns 0 on read
    0xE -> rip
    0xF -> rsp

8b instructions clear dst top bits

every mov instruction fetches next byte as s_imm8 offset
jmp instructions fetch next 2 bytes as s_imm16 offset
> jif fetches byte thereafter as flags
    > [xxxC ZBAE]

what offset does for different mov instructions:
    rr: rb = ra + off
    mr: rb = [ma + off]
    rm: [mb + off] = ra
    mm: [mb] = [ma + off]

// a gets priority
    for ma: [[ma+off]]
    for ra:  [ra+off]

    for i[]: i+off

instructions marked with [] cannot be executed in user mode!

 00  -> nop
[01] -> halt
 02  -> clrf [clears flags]
 03  -> lea r // load effective address, converts adr in reg to physical adr
[04] -> serial out
[05] -> serial in
[06] -> io instruction
 07  -> psh flags | pshflg
 08  -> pop flags | popflg
 0E  -> int [interrupt]
 0F  -> dbg
  
 10  -> 32mov rr
 11  -> 32mov mr
 12  -> 32mov rm
 13  -> 32mov mm
 14  -> 32mov rra
 15  -> 32mov mra
 16  -> 32mov rma
 17  -> 32mov mma
 18  -> 32mov rar
 19  -> 32mov mar
 1A  -> 32mov ram
 1B  -> 32mov mam
 1C  -> 32mov ir
 1D  -> 32mov im
  
 20  -> 16mov rr
 21  -> 16mov mr
 22  -> 16mov rm
 23  -> 16mov mm
 24  -> 16mov rra
 25  -> 16mov mra
 26  -> 16mov rma
 27  -> 16mov mma
 28  -> 16mov rar
 29  -> 16mov mar
 2A  -> 16mov ram
 2B  -> 16mov mam
 2C  -> 16mov ir
 2D  -> 16mov im
  
 30  ->  8mov rr
 31  ->  8mov mr
 32  ->  8mov rm
 33  ->  8mov mm
 34  ->  8mov rra
 35  ->  8mov mra
 36  ->  8mov rma
 37  ->  8mov mma
 38  ->  8mov rar
 39  ->  8mov mar
 3A  ->  8mov ram
 3B  ->  8mov mam
 3C  ->  8mov ir
 3D  ->  8mov im
  
 40  -> 32psh r
 41  -> 32psh m
 42  -> 32psh i
 43  -> 16psh r
 44  -> 16psh m
 45  -> 16psh i
 46  ->  8psh r
 47  ->  8psh m
 48  ->  8psh i
 49  -> 32pop r
 4A  -> 32pop m
 4B  -> 16pop r
 4C  -> 16pop m
 4D  ->  8pop r
 4E  ->  8pop m
  
 50  -> jmp r
 51  -> jmp m
 52  -> jmp i
 53  -> jif r
 54  -> jif m
 55  -> jif i
 56  -> call r
 57  -> call m
 58  -> call i
 5F  -> ret
  
 60  -> not rr
 61  -> not rm
 62  -> not mr
 63  -> not mm
 64  -> cmp rr
 65  -> cmp rm
 66  -> cmp mr
 67  -> cmp mm
 6E  -> inc r
 6F  -> dec r
  
 70  -> add s
 71  -> sub s
 72  -> mul s
 73  -> div s
 74  -> mod s
 75  -> and s
 76  ->  or s
 77  -> xor s
 78  -> shl s
 79  -> shr s
 7A  ->nand s
 7B  -> nor s
  
 80  -> add rrr
 81  -> sub rrr
 82  -> mul rrr
 83  -> div rrr
 84  -> mod rrr
 85  -> and rrr
 86  ->  or rrr
 87  -> xor rrr
 88  -> shl rrr
 89  -> shr rrr
 8A  ->nand rrr
 8B  -> nor rrr
  
 90  -> add rrm
 91  -> sub rrm
 92  -> mul rrm
 93  -> div rrm
 94  -> mod rrm
 95  -> and rrm
 96  ->  or rrm
 97  -> xor rrm
 98  -> shl rrm
 99  -> shr rrm
 9A  ->nand rrm
 9B  -> nor rrm
  
 A0  -> add rmr
 A1  -> sub rmr
 A2  -> mul rmr
 A3  -> div rmr
 A4  -> mod rmr
 A5  -> and rmr
 A6  ->  or rmr
 A7  -> xor rmr
 A8  -> shl rmr
 A9  -> shr rmr
 AA  ->nand rmr
 AB  -> nor rmr
  
 B0  -> add rmm
 B1  -> sub rmm
 B2  -> mul rmm
 B3  -> div rmm
 B4  -> mod rmm
 B5  -> and rmm
 B6  ->  or rmm
 B7  -> xor rmm
 B8  -> shl rmm
 B9  -> shr rmm
 BA  ->nand rmm
 BB  -> nor rmm
  
 C0  -> add mrr
 C1  -> sub mrr
 C2  -> mul mrr
 C3  -> div mrr
 C4  -> mod mrr
 C5  -> and mrr
 C6  ->  or mrr
 C7  -> xor mrr
 C8  -> shl mrr
 C9  -> shr mrr
 CA  ->nand mrr
 CB  -> nor mrr
  
 D0  -> add mrm
 D1  -> sub mrm
 D2  -> mul mrm
 D3  -> div mrm
 D4  -> mod mrm
 D5  -> and mrm
 D6  ->  or mrm
 D7  -> xor mrm
 D8  -> shl mrm
 D9  -> shr mrm
 DA  ->nand mrm
 DB  -> nor mrm
  
 E0  -> add mmr
 E1  -> sub mmr
 E2  -> mul mmr
 E3  -> div mmr
 E4  -> mod mmr
 E5  -> and mmr
 E6  ->  or mmr
 E7  -> xor mmr
 E8  -> shl mmr
 E9  -> shr mmr
 EA  ->nand mmr
 EB  -> nor mmr
  
 F0  -> add mmm
 F1  -> sub mmm
 F2  -> mul mmm
 F3  -> div mmm
 F4  -> mod mmm
 F5  -> and mmm
 F6  ->  or mmm
 F7  -> xor mmm
 F8  -> shl mmm
 F9  -> shr mmm
 FA  ->nand mmm
 FB  -> nor mmm



binary header (size 32)
    word version

version 0x0000:
    dword entry_point
    dword stack_adr
    dword stack_size
    byte flags [xxxx xxxx]

io instruction:
    provides functionality for managing IO

    next byte fetched as instruction:
        F0 -> Switches IO device
            -> ra 8b device ID
        F1 -> ray instruction [ in ra ] (see below)

IO Device ID 0 -> FileSystem [selected by default]
        0X -> IO 
        00 -> Reindex() // updates file list
        01 -> GetFiles() // puts file count into ra [files are indexed at 1 to [count] so this implies all file indices]
                -> ra
        02 -> CreateFile() // creates a file with name, returns 0 on success, otherwise err_code
            -> ra name ptr
                -> rb
        03 -> DeleteFile() // deletes file with index, !!! files are reindexed !!!, returns 0 on success
            -> ra file index
                -> rb
        04 -> FileExists() // checks whether the name exists, returns 1 on success
            -> ra name ptr
                -> rb
        05 -> GetSupDir() // returns the upper directory of this path
            -> ra name ptr
            -> rb dst ptr
                -> rc result
        0E -> QuickRead() // use file path to directly read [quick read due to no fs setup]
            -> ra ptr to path
            -> rb dst ptr
                -> rc length
                -> rd restult
        0F -> SetRoot() // sets the root of the FileSystem [although reindex isnt required it is highly recommended to do it anyway]
            -> ra ptr to path
                -> rb result [0 = OK]

        1X -> basic file info getters and setters
        10 -> GetFileName()
            -> ra index
            -> rb storage ptr
                -> rc length
                -> rd result [0 = OK]
        11 -> SetFileName() // results in reindex
            -> ra index
            -> rb storage ptr
                -> rc result [0 = OK]
        12 -> GetFileLength()
            -> ra index
                -> rb result [0 = OK]
        12 -> SetFileLength() // results in reindex
            -> ra index
            -> rb length
                -> rc result [0 = OK]

        20 -> ReadFile()
            -> ra index
            -> rb storage ptr
                -> rc result [0 = OK]
                -> rd amount of bytes read
        21 -> ReadFileAt() // will only read 1 char
            -> ra index
            -> rb storage ptr
            -> rc position
                -> rd result [0 = OK]
        22 -> WriteFile() // replaces file contents [sets length]
            -> ra index
            -> rb length
            -> rc storage ptr
                -> rd result [0 = OK]
        23 -> WriteFileAt() // will only write 1 char
            -> ra index
            -> rb storage ptr
            -> rc position
                -> rd result [0 = OK]

IO Device ID 1 -> InterruptHandler
        00 -> GetInterruptID() // gives an interrupt id, 0 means no interrupt
                -> ra
        01 -> SetUserMode() // initializes user mode
        02 -> SetInterruptHandlerLocation() // sets to where interrupts jump
            -> ra adr
            // when in user mode, if a restricted instruction is executed the vm will interrupt and jump to the handler
            // this will disable user mod / enable kernel mod and set the most recent interrupt id to 1
            //      => interrupt id 1 = user mode access violation
        03 -> ResolveInterrupt() // resolves the interrupt; "sysret"
        04 -> RemoveInterrupt()  // resolves the interrupt, doesnt return, doesnt unset kernel mode
        05 -> SetSubMode() // still kernel mode, but interrupts on hlt
        06 -> ResolveInterruptNoRSP() // resolves the interrupt; "sysret"; doesnt set rsp
        
IO Device ID 2 -> MemoryManager
        00 -> SuspendMapping() // suspend all mappings
        01 -> ResumeMapping() // resume all mapping
        02 -> SetMap() // sets map starting at adr for length bytes and maps to dst, returns mapping ID
            -> ra adr
            -> rb length
            -> rc dst
                -> rd ID
        03 -> RmvMap() // removes mapping of specific ID
            -> ra ID



ray instructions:
    00 -> WindowShouldClose() 
            -> stack: 1 -> should close, 
                      0 -> shouldnt close
    01 -> BeginDrawing()
    02 -> EndDrawing()
    03 -> DrawRectangle() 
        -> posx
        -> posy
        -> width
        -> height
        -> color
    04 -> DrawFPS()
        -> posx
        -> posy
    05 -> ClearBackground()
        -> color
    06 -> DrawText()
        -> x
        -> y
        -> size
        -> color
        -> ptr to text

    D0 -> IsWindowResized
            -> stack: 1 -> was resized, 
                      0 -> wasnt resized
    D1 -> GetWindowWidth()
            -> stack
    D2 -> GetWindowHeight()
            -> stack

    ED -> SetTargetFPS
        -> FPS
    EE -> CloseWindow()
    EF -> OpenWindow()
        -> width
        -> height
        -> ptr to title
        -> B resizable
